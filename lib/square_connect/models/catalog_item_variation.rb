=begin
#Square Connect API

OpenAPI spec version: 2.0
Contact: developers@squareup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SquareConnect
  # An item variation (i.e., product) in the Catalog object model.
  class CatalogItemVariation
    # The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.
    attr_accessor :item_id

    # The item variation's name. Searchable.
    attr_accessor :name

    # The item variation's SKU, if any. Searchable.
    attr_accessor :sku

    # The item variation's UPC, if any. Searchable in the Connect API. This field is only exposed in the Connect API. It is not exposed in Square's Dashboard, Square Point of Sale app or Retail Point of Sale app.
    attr_accessor :upc

    # The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations's position. On reads, the value is not guaranteed to be sequential or unique.
    attr_accessor :ordinal

    # Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
    attr_accessor :pricing_type

    # The item variation's price, if fixed pricing is used.
    attr_accessor :price_money

    # Per-[location](#type-location) price and inventory overrides.
    attr_accessor :location_overrides

    # If `true`, inventory tracking is active for the variation.
    attr_accessor :track_inventory

    # Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
    attr_accessor :inventory_alert_type

    # If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.
    attr_accessor :inventory_alert_threshold

    # Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.
    attr_accessor :user_data

    # If the [CatalogItem](#type-catalogitem) that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
    attr_accessor :service_duration

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'item_id' => :'item_id',
        :'name' => :'name',
        :'sku' => :'sku',
        :'upc' => :'upc',
        :'ordinal' => :'ordinal',
        :'pricing_type' => :'pricing_type',
        :'price_money' => :'price_money',
        :'location_overrides' => :'location_overrides',
        :'track_inventory' => :'track_inventory',
        :'inventory_alert_type' => :'inventory_alert_type',
        :'inventory_alert_threshold' => :'inventory_alert_threshold',
        :'user_data' => :'user_data',
        :'service_duration' => :'service_duration'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'item_id' => :'String',
        :'name' => :'String',
        :'sku' => :'String',
        :'upc' => :'String',
        :'ordinal' => :'Integer',
        :'pricing_type' => :'String',
        :'price_money' => :'Money',
        :'location_overrides' => :'Array<ItemVariationLocationOverrides>',
        :'track_inventory' => :'BOOLEAN',
        :'inventory_alert_type' => :'String',
        :'inventory_alert_threshold' => :'Integer',
        :'user_data' => :'String',
        :'service_duration' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'item_id')
        self.item_id = attributes[:'item_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.has_key?(:'upc')
        self.upc = attributes[:'upc']
      end

      if attributes.has_key?(:'ordinal')
        self.ordinal = attributes[:'ordinal']
      end

      if attributes.has_key?(:'pricing_type')
        self.pricing_type = attributes[:'pricing_type']
      end

      if attributes.has_key?(:'price_money')
        self.price_money = attributes[:'price_money']
      end

      if attributes.has_key?(:'location_overrides')
        if (value = attributes[:'location_overrides']).is_a?(Array)
          self.location_overrides = value
        end
      end

      if attributes.has_key?(:'track_inventory')
        self.track_inventory = attributes[:'track_inventory']
      end

      if attributes.has_key?(:'inventory_alert_type')
        self.inventory_alert_type = attributes[:'inventory_alert_type']
      end

      if attributes.has_key?(:'inventory_alert_threshold')
        self.inventory_alert_threshold = attributes[:'inventory_alert_threshold']
      end

      if attributes.has_key?(:'user_data')
        self.user_data = attributes[:'user_data']
      end

      if attributes.has_key?(:'service_duration')
        self.service_duration = attributes[:'service_duration']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      pricing_type_validator = EnumAttributeValidator.new('String', ["FIXED_PRICING", "VARIABLE_PRICING"])
      return false unless pricing_type_validator.valid?(@pricing_type)
      inventory_alert_type_validator = EnumAttributeValidator.new('String', ["NONE", "LOW_QUANTITY"])
      return false unless inventory_alert_type_validator.valid?(@inventory_alert_type)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pricing_type Object to be assigned
    def pricing_type=(pricing_type)
      validator = EnumAttributeValidator.new('String', ["FIXED_PRICING", "VARIABLE_PRICING"])
      unless validator.valid?(pricing_type)
        fail ArgumentError, "invalid value for 'pricing_type', must be one of #{validator.allowable_values}."
      end
      @pricing_type = pricing_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inventory_alert_type Object to be assigned
    def inventory_alert_type=(inventory_alert_type)
      validator = EnumAttributeValidator.new('String', ["NONE", "LOW_QUANTITY"])
      unless validator.valid?(inventory_alert_type)
        fail ArgumentError, "invalid value for 'inventory_alert_type', must be one of #{validator.allowable_values}."
      end
      @inventory_alert_type = inventory_alert_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          item_id == o.item_id &&
          name == o.name &&
          sku == o.sku &&
          upc == o.upc &&
          ordinal == o.ordinal &&
          pricing_type == o.pricing_type &&
          price_money == o.price_money &&
          location_overrides == o.location_overrides &&
          track_inventory == o.track_inventory &&
          inventory_alert_type == o.inventory_alert_type &&
          inventory_alert_threshold == o.inventory_alert_threshold &&
          user_data == o.user_data &&
          service_duration == o.service_duration
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [item_id, name, sku, upc, ordinal, pricing_type, price_money, location_overrides, track_inventory, inventory_alert_type, inventory_alert_threshold, user_data, service_duration].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SquareConnect.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
