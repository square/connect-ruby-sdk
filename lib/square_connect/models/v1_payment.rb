=begin
#Square Connect API

OpenAPI spec version: 2.0
Contact: developers@squareup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SquareConnect

  class V1Payment
    # The payment's unique identifier.
    attr_accessor :id

    # The unique identifier of the merchant that took the payment.
    attr_accessor :merchant_id

    # The time when the payment was created, in ISO 8601 format.
    attr_accessor :created_at

    # The unique identifier of the Square account that took the payment.
    attr_accessor :creator_id

    # The device that took the payment.
    attr_accessor :device

    # The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
    attr_accessor :payment_url

    # The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
    attr_accessor :receipt_url

    # The sum of all inclusive taxes associated with the payment.
    attr_accessor :inclusive_tax_money

    # The sum of all additive taxes associated with the payment.
    attr_accessor :additive_tax_money

    # The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money.
    attr_accessor :tax_money

    # The total of all tips applied to the payment.
    attr_accessor :tip_money

    # The total of all discounts applied to the payment.
    attr_accessor :discount_money

    # The total of all discounts applied to the payment.
    attr_accessor :total_collected_money

    # The total of all processing fees collected by Square for the payment.
    attr_accessor :processing_fee_money

    # The amount to be deposited into the merchant's bank account for the payment.
    attr_accessor :net_total_money

    # The total of all refunds applied to the payment.
    attr_accessor :refunded_money

    attr_accessor :swedish_rounding_money

    attr_accessor :gross_sales_money

    attr_accessor :net_sales_money

    # All of the inclusive taxes associated with the payment.
    attr_accessor :inclusive_tax

    # All of the additive taxes associated with the payment.
    attr_accessor :additive_tax

    # All of the additive taxes associated with the payment.
    attr_accessor :tender

    # All of the refunds applied to the payment.
    attr_accessor :refunds

    # The items purchased in the payment.
    attr_accessor :itemizations


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'merchant_id' => :'merchant_id',
        :'created_at' => :'created_at',
        :'creator_id' => :'creator_id',
        :'device' => :'device',
        :'payment_url' => :'payment_url',
        :'receipt_url' => :'receipt_url',
        :'inclusive_tax_money' => :'inclusive_tax_money',
        :'additive_tax_money' => :'additive_tax_money',
        :'tax_money' => :'tax_money',
        :'tip_money' => :'tip_money',
        :'discount_money' => :'discount_money',
        :'total_collected_money' => :'total_collected_money',
        :'processing_fee_money' => :'processing_fee_money',
        :'net_total_money' => :'net_total_money',
        :'refunded_money' => :'refunded_money',
        :'swedish_rounding_money' => :'swedish_rounding_money',
        :'gross_sales_money' => :'gross_sales_money',
        :'net_sales_money' => :'net_sales_money',
        :'inclusive_tax' => :'inclusive_tax',
        :'additive_tax' => :'additive_tax',
        :'tender' => :'tender',
        :'refunds' => :'refunds',
        :'itemizations' => :'itemizations'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'merchant_id' => :'String',
        :'created_at' => :'String',
        :'creator_id' => :'String',
        :'device' => :'Device',
        :'payment_url' => :'String',
        :'receipt_url' => :'String',
        :'inclusive_tax_money' => :'V1Money',
        :'additive_tax_money' => :'V1Money',
        :'tax_money' => :'V1Money',
        :'tip_money' => :'V1Money',
        :'discount_money' => :'V1Money',
        :'total_collected_money' => :'V1Money',
        :'processing_fee_money' => :'V1Money',
        :'net_total_money' => :'V1Money',
        :'refunded_money' => :'V1Money',
        :'swedish_rounding_money' => :'V1Money',
        :'gross_sales_money' => :'V1Money',
        :'net_sales_money' => :'V1Money',
        :'inclusive_tax' => :'Array<V1PaymentTax>',
        :'additive_tax' => :'Array<V1PaymentTax>',
        :'tender' => :'Array<V1Tender>',
        :'refunds' => :'Array<V1Refund>',
        :'itemizations' => :'Array<V1PaymentItemization>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'creator_id')
        self.creator_id = attributes[:'creator_id']
      end

      if attributes.has_key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.has_key?(:'payment_url')
        self.payment_url = attributes[:'payment_url']
      end

      if attributes.has_key?(:'receipt_url')
        self.receipt_url = attributes[:'receipt_url']
      end

      if attributes.has_key?(:'inclusive_tax_money')
        self.inclusive_tax_money = attributes[:'inclusive_tax_money']
      end

      if attributes.has_key?(:'additive_tax_money')
        self.additive_tax_money = attributes[:'additive_tax_money']
      end

      if attributes.has_key?(:'tax_money')
        self.tax_money = attributes[:'tax_money']
      end

      if attributes.has_key?(:'tip_money')
        self.tip_money = attributes[:'tip_money']
      end

      if attributes.has_key?(:'discount_money')
        self.discount_money = attributes[:'discount_money']
      end

      if attributes.has_key?(:'total_collected_money')
        self.total_collected_money = attributes[:'total_collected_money']
      end

      if attributes.has_key?(:'processing_fee_money')
        self.processing_fee_money = attributes[:'processing_fee_money']
      end

      if attributes.has_key?(:'net_total_money')
        self.net_total_money = attributes[:'net_total_money']
      end

      if attributes.has_key?(:'refunded_money')
        self.refunded_money = attributes[:'refunded_money']
      end

      if attributes.has_key?(:'swedish_rounding_money')
        self.swedish_rounding_money = attributes[:'swedish_rounding_money']
      end

      if attributes.has_key?(:'gross_sales_money')
        self.gross_sales_money = attributes[:'gross_sales_money']
      end

      if attributes.has_key?(:'net_sales_money')
        self.net_sales_money = attributes[:'net_sales_money']
      end

      if attributes.has_key?(:'inclusive_tax')
        if (value = attributes[:'inclusive_tax']).is_a?(Array)
          self.inclusive_tax = value
        end
      end

      if attributes.has_key?(:'additive_tax')
        if (value = attributes[:'additive_tax']).is_a?(Array)
          self.additive_tax = value
        end
      end

      if attributes.has_key?(:'tender')
        if (value = attributes[:'tender']).is_a?(Array)
          self.tender = value
        end
      end

      if attributes.has_key?(:'refunds')
        if (value = attributes[:'refunds']).is_a?(Array)
          self.refunds = value
        end
      end

      if attributes.has_key?(:'itemizations')
        if (value = attributes[:'itemizations']).is_a?(Array)
          self.itemizations = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          merchant_id == o.merchant_id &&
          created_at == o.created_at &&
          creator_id == o.creator_id &&
          device == o.device &&
          payment_url == o.payment_url &&
          receipt_url == o.receipt_url &&
          inclusive_tax_money == o.inclusive_tax_money &&
          additive_tax_money == o.additive_tax_money &&
          tax_money == o.tax_money &&
          tip_money == o.tip_money &&
          discount_money == o.discount_money &&
          total_collected_money == o.total_collected_money &&
          processing_fee_money == o.processing_fee_money &&
          net_total_money == o.net_total_money &&
          refunded_money == o.refunded_money &&
          swedish_rounding_money == o.swedish_rounding_money &&
          gross_sales_money == o.gross_sales_money &&
          net_sales_money == o.net_sales_money &&
          inclusive_tax == o.inclusive_tax &&
          additive_tax == o.additive_tax &&
          tender == o.tender &&
          refunds == o.refunds &&
          itemizations == o.itemizations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, merchant_id, created_at, creator_id, device, payment_url, receipt_url, inclusive_tax_money, additive_tax_money, tax_money, tip_money, discount_money, total_collected_money, processing_fee_money, net_total_money, refunded_money, swedish_rounding_money, gross_sales_money, net_sales_money, inclusive_tax, additive_tax, tender, refunds, itemizations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SquareConnect.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
